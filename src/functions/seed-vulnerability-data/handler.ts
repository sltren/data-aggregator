import { APIGatewayProxyHandler, APIGatewayProxyResult } from "aws-lambda";
import { Vulnerability } from "../../models/vulnerability-model";
import { vulnerabilityData as vulnerabilities } from "../../sample-data/vulnerability-data";
import { VulnerabilitySchema } from "../../validations/vulnerability-schema";

export const seedVulnerabilityData: APIGatewayProxyHandler =
  async (): Promise<APIGatewayProxyResult> => {
    try {
      // Validate vulnerabilities
      for (const vulnerability of vulnerabilities) {
        const { error } = VulnerabilitySchema.validate(vulnerability);
        if (error) {
          throw new Error(
            `Validation error for vulnerability: ${error.message}`
          );
        }
      }

      await Promise.all(
        vulnerabilities.map((vulnerability) => Vulnerability.put(vulnerability))
      );

      return {
        statusCode: 200,
        body: JSON.stringify({
          message: "Vulnerability data seeded successfully",
        }),
      };
    } catch (error) {
      const typedError = error as Error;
      console.error("Error seeding vulnerability data:", typedError);
      return {
        statusCode: 500,
        body: JSON.stringify({ message: typedError.message }),
      };
    }
  };
